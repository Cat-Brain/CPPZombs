#version 420 core
layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 normal;
layout (location = 2) out vec4 position;

layout (depth_less) out float gl_FragDepth;

uniform mat4 camera, cameraInv, perspective;
uniform vec3 camPos;
in vec4 color, posScale;

in vec3 tPos;

uniform sampler2D stippleTexture;
uniform int stippleTextureWidth;

float Mask(vec2 pos)
{
	return texture(stippleTexture, pos / stippleTextureWidth).r;
	return (sin(pos.x) + sin(pos.y)) * 0.25 + 0.5;
}

void main()
{
	vec3 dir = normalize(vec3(camera * vec4(tPos, 1.)));
	vec3 pos = vec3(camera * vec4(posScale.xyz, 1.));
	float b = dot(-pos, dir);
	float c = dot(pos, pos) - posScale.w * posScale.w;
	float d = b * b - c; // Discriminant from quadratic formula.

	if (d <= 0)
	{
		discard;
		return;
	}

	float h = sqrt(d);
	if (-b + h <= 0 || (color.a != 1. && color.a < Mask(gl_FragCoord.xy)))
	{
		discard;
		return;
	}
	float dstNear = -h - b;


	FragColor = color;
	
	position = vec4(dir * max(0, dstNear), 1.);
	vec4 dPos = perspective * vec4(position.xyz, 1.);
	normal = vec4(normalize(dir * dstNear - pos), 1.);
	gl_FragDepth = 0.5 + 0.5 * dPos.z / dPos.w;
} 