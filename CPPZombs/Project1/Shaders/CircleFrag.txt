#version 420 core
layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 normal;
layout (location = 2) out vec4 position;

layout (depth_less) out float gl_FragDepth;

uniform mat4 camera, cameraInv, perspective;
uniform vec3 camPos;
in vec4 color, posScale;

in vec3 tPos;

vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}
float noise(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}

float Mask(vec3 pos)
{
	pos *= 2;
	return noise(pos);
	pos *= 12;
	return sin(pos.x + pos.y + pos.z) * 0.5 + 0.5;
	pos *= 12;
	return (sin(pos.x) + sin(pos.y) + sin(pos.z)) * 0.16666 + 0.5;
}

void main()
{
	vec3 dir = normalize(vec3(camera * vec4(tPos, 1.)));
	vec3 pos = vec3(camera * vec4(posScale.xyz, 1.));
	float b = dot(-pos, dir);
	float c = dot(pos, pos) - posScale.w * posScale.w;
	float d = b * b - c; // Discriminant from quadratic formula.

	if (d <= 0) discard;

	float h = sqrt(d);
	if (-b + h <= 0 || (color.a != 1. && color.a < Mask(normalize(tPos - posScale.xyz) * posScale.w))) discard;
	float dstToSphereNear = max(0, (-h - b));


	FragColor = color;
	
	position = vec4(dir * dstToSphereNear, 1.);
	vec4 dPos = perspective * vec4(position.xyz, 1.);
	normal = vec4(normalize(position.xyz - pos), 1.);
	gl_FragDepth = 0.5 + 0.5 * dPos.z / dPos.w;
} 