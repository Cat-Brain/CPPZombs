#version 420 core
layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 normal;
layout (location = 2) out vec4 position;

layout (depth_less) out float gl_FragDepth;

uniform mat4 perspective;
uniform vec4 color, posScale;
uniform vec3 camPos;

in vec3 tPos;


// simplified version of joeedh's https://www.shadertoy.com/view/Md3GWf
// see also https://www.shadertoy.com/view/MdtGD7

// --- checkerboard noise : to decorelate the pattern between size x size tiles 

// simple x-y decorrelated noise seems enough
#define stepnoise0(p, size) rnd( floor(p/size)*size ) 
#define rnd(U) fract(sin( 1e3*(U)*mat2(1,-7.131, 12.9898, 1.233) )* 43758.5453)

//   joeedh's original noise (cleaned-up)
vec2 stepnoise(vec2 p, float size) { 
    p = floor((p+10.)/size)*size;          // is p+10. useful ?   
    p = fract(p*.1) + 1. + p*vec2(2,3)/1e4;    
    p = fract( 1e5 / (.1*p.x*(p.y+vec2(0,1)) + 1.) );
    p = fract( 1e5 / (p*vec2(.1234,2.35) + 1.) );      
    return p;    
}

// --- stippling mask  : regular stippling + per-tile random offset + tone-mapping
float mask(vec2 p) { 
#define SEED1 1.705
#define DMUL  8.12235325       // are exact DMUL and -.5 important ?
    p += ( stepnoise0(p, 5.5) - .5 ) *DMUL;   // bias [-2,2] per tile otherwise too regular
    float f = fract( p.x*SEED1 + p.y/(SEED1+.15555) ); //  weights: 1.705 , 0.5375
  //return f;  // If you want to skeep the tone mapping
    f *= 1.03; //  to avoid zero-stipple in plain white ?
    // --- indeed, is a tone mapping ( equivalent to do the reciprocal on the image, see tests )
    // returned value in [0,37.2] , but < 0.57 with P=50% 
    return  (pow(f, 150.) + 1.3*f ) / 2.3; // <.98 : ~ f/2, P=50%  >.98 : ~f^150, P=50%
}

void main()
{
	vec3 dir = normalize(tPos - camPos);
	vec3 pos = posScale.xyz - camPos;
	float b = 2 * dot(-pos, dir);
	float c = dot(pos, pos) - posScale.w * posScale.w;
	float d = b * b - 4 * c; // Discriminant from quadratic formula.

	if (d <= 0) discard;
	if (color.a != 1. && color.a < mask(gl_FragCoord.xy)) discard;

	float s = sqrt(d);
	float dstToSphereNear = max(0, (-s - b) * 0.5);


	position = vec4(dir * dstToSphereNear, color.a);
	FragColor = color;
	
	normal = vec4(normalize(position.xyz - pos), color.a);
	position.xyz += camPos;
	vec4 dPos = perspective * vec4(position.xyz, 1.);
	gl_FragDepth = 0.5 + 0.5 * dPos.z / dPos.w;
} 