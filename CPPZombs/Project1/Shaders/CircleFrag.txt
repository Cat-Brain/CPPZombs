#version 420 core
layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 normal;
layout (location = 2) out vec4 position;

layout (depth_less) out float gl_FragDepth;

uniform mat4 perspective;
uniform vec4 color, posScale;

in vec3 tPos;

void main()
{
	vec3 dir = normalize(tPos);
	float b = 2 * dot(-posScale.xyz, dir);
	float c = dot(posScale.xyz, posScale.xyz) - posScale.w * posScale.w;
	float d = b * b - 4 * c; // Discriminant from quadratic formula.

	if (d <= 0) discard;
	float s = sqrt(d);
	float dstToSphereNear = max(0, (-s - b) * 0.5);


	position = vec4(dir * dstToSphereNear, color.a);
	FragColor = color;
	
	normal = vec4(normalize(position.xyz - posScale.xyz), color.a);
	
	vec4 dPos = perspective * vec4(position.xyz, 1.);
	gl_FragDepth = 0.5 + 0.5 * dPos.z / dPos.w;
} 