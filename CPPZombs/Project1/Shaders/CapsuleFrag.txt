#version 420 core
layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 normal;
layout (location = 2) out vec4 position;

layout (depth_less) out float gl_FragDepth;

uniform mat4 camera, camRot, cameraInv, perspective;
uniform vec4 color;
uniform vec3 a, b, camPos;
uniform float thickness;

in vec3 tPos;


float capIntersect( in vec3 ro, in vec3 rd, in vec3 pa, in vec3 pb, in float ra )
{
    vec3  ba = pb - pa;
    vec3  oa = ro - pa;
    float baba = dot(ba,ba);
    float bard = dot(ba,rd);
    float baoa = dot(ba,oa);
    float rdoa = dot(rd,oa);
    float oaoa = dot(oa,oa);
    float a = baba      - bard*bard;
    float b = baba*rdoa - baoa*bard;
    float c = baba*oaoa - baoa*baoa - ra*ra*baba;
    float h = b*b - a*c;
    if( h >= 0.0 )
    {
        float t = (-b-sqrt(h))/a;
        float y = baoa + t*bard;
        // body
        if( y>0.0 && y<baba ) return t;
        // caps
        vec3 oc = (y <= 0.0) ? oa : ro - pb;
        b = dot(rd,oc);
        c = dot(oc,oc) - ra*ra;
        h = b*b - c;
        if( h>0.0 ) return -b - sqrt(h);
    }
    return -1.0;
}

vec3 capNormal( in vec3 pos, in vec3 a, in vec3 b, in float r )
{
    vec3  ba = b - a;
    vec3  pa = pos - a;
    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);
    return (pa - h*ba)/r;
}

// simplified version of joeedh's https://www.shadertoy.com/view/Md3GWf
// see also https://www.shadertoy.com/view/MdtGD7

// --- checkerboard noise : to decorelate the pattern between size x size tiles 

// simple x-y decorrelated noise seems enough
#define stepnoise0(p, size) rnd( floor(p/size)*size ) 
#define rnd(U) fract(sin( 1e3*(U)*mat2(1,-7.131, 12.9898, 1.233) )* 43758.5453)

//   joeedh's original noise (cleaned-up)
vec2 stepnoise(vec2 p, float size) { 
    p = floor((p+10.)/size)*size;          // is p+10. useful ?   
    p = fract(p*.1) + 1. + p*vec2(2,3)/1e4;    
    p = fract( 1e5 / (.1*p.x*(p.y+vec2(0,1)) + 1.) );
    p = fract( 1e5 / (p*vec2(.1234,2.35) + 1.) );      
    return p;    
}

// --- stippling mask  : regular stippling + per-tile random offset + tone-mapping
float mask(vec2 p) { 
#define SEED1 1.705
#define DMUL  8.12235325       // are exact DMUL and -.5 important ?
    p += ( stepnoise0(p, 5.5) - .5 ) *DMUL;   // bias [-2,2] per tile otherwise too regular
    float f = fract( p.x*SEED1 + p.y/(SEED1+.15555) ); //  weights: 1.705 , 0.5375
  //return f;  // If you want to skeep the tone mapping
    f *= 1.03; //  to avoid zero-stipple in plain white ?
    // --- indeed, is a tone mapping ( equivalent to do the reciprocal on the image, see tests )
    // returned value in [0,37.2] , but < 0.57 with P=50% 
    return  (pow(f, 150.) + 1.3*f ) / 2.3; // <.98 : ~ f/2, P=50%  >.98 : ~f^150, P=50%
} 

void main()
{
	vec3 dir = normalize(tPos - camPos);
	float dist = capIntersect(camPos, dir, a, b, thickness);
	if (dist < 0 || (color.a != 1. && color.a < mask(gl_FragCoord.xy))) discard;
	
	FragColor = color;
    dir = normalize(vec3(camera * vec4(tPos, 1.)));
	position = vec4(dir * dist, 1.);
	normal = camRot * vec4(capNormal(position.xyz, a, b, thickness), 1.);
	vec4 dPos = perspective * vec4(position.xyz, 1.);
	gl_FragDepth = 0.5 + 0.5 * dPos.z / dPos.w;
} 